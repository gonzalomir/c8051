;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 7/11/2014 07:26:52 p.m.
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x0201A6  	LJMP 422
0x0003	0x020000  	LJMP 0
0x0006	0x00      	NOP
0x0007	0x00      	NOP
0x0008	0x00      	NOP
0x0009	0x00      	NOP
0x000A	0x00      	NOP
0x000B	0x020124  	LJMP 292
0x000E	0x00      	NOP
0x000F	0x00      	NOP
0x0010	0x00      	NOP
0x0011	0x00      	NOP
0x0012	0x00      	NOP
0x0013	0x020000  	LJMP 0
0x0016	0x00      	NOP
0x0017	0x00      	NOP
0x0018	0x00      	NOP
0x0019	0x00      	NOP
0x001A	0x00      	NOP
0x001B	0x020000  	LJMP 0
0x001E	0x00      	NOP
0x001F	0x00      	NOP
0x0020	0x00      	NOP
0x0021	0x00      	NOP
0x0022	0x00      	NOP
0x0023	0x020000  	LJMP 0
0x0026	0x00      	NOP
0x0027	0x00      	NOP
0x0028	0x00      	NOP
0x0029	0x00      	NOP
0x002A	0x00      	NOP
0x002B	0x020000  	LJMP 0
_Div_16x16_U:
;__Lib_Math.c,273 :: 		
;__Lib_Math.c,275 :: 		
0x002E	0xBD000B  	CJNE R5, 0, __op2hi_not_zero
;__Lib_Math.c,276 :: 		
0x0031	0xB90029  	CJNE R1, 0, __op1hi_not_zero
;__Lib_Math.c,277 :: 		
0x0034	0xE8      	MOV A, R0
;__Lib_Math.c,278 :: 		
0x0035	0x8CF0    	MOV B, R4
;__Lib_Math.c,279 :: 		
0x0037	0x84      	DIV AB
;__Lib_Math.c,280 :: 		
0x0038	0xF8      	MOV R0, A
;__Lib_Math.c,281 :: 		
0x0039	0xACF0    	MOV R4, B
;__Lib_Math.c,282 :: 		
0x003B	0x22      	RET
;__Lib_Math.c,284 :: 		
__op2hi_not_zero:
;__Lib_Math.c,285 :: 		
0x003C	0xE4      	CLR A
;__Lib_Math.c,286 :: 		
0x003D	0xCD      	XCH A, R5
;__Lib_Math.c,287 :: 		
0x003E	0xFF      	MOV R7, A
;__Lib_Math.c,288 :: 		
0x003F	0x75F008  	MOV B, 8
;__Lib_Math.c,290 :: 		
__Div_16x16_U_Loop1:
;__Lib_Math.c,291 :: 		
0x0042	0xE8      	MOV A, R0
;__Lib_Math.c,292 :: 		
0x0043	0x28      	ADD A, R0
;__Lib_Math.c,293 :: 		
0x0044	0xF8      	MOV R0, A
;__Lib_Math.c,294 :: 		
0x0045	0xE9      	MOV A, R1
;__Lib_Math.c,295 :: 		
0x0046	0x33      	RLC A
;__Lib_Math.c,296 :: 		
0x0047	0xF9      	MOV R1, A
;__Lib_Math.c,297 :: 		
0x0048	0xED      	MOV A, R5
;__Lib_Math.c,298 :: 		
0x0049	0x33      	RLC A
;__Lib_Math.c,299 :: 		
0x004A	0xFD      	MOV R5, A
;__Lib_Math.c,300 :: 		
0x004B	0xE9      	MOV A, R1
;__Lib_Math.c,301 :: 		
0x004C	0x9C      	SUBB A, R4
;__Lib_Math.c,302 :: 		
0x004D	0xED      	MOV A, R5
;__Lib_Math.c,303 :: 		
0x004E	0x9F      	SUBB A, R7
;__Lib_Math.c,304 :: 		
0x004F	0x4005    	JC __Div_16x16_U_Lab1
;__Lib_Math.c,305 :: 		
0x0051	0xFD      	MOV R5, A
;__Lib_Math.c,306 :: 		
0x0052	0xE9      	MOV A, R1
;__Lib_Math.c,307 :: 		
0x0053	0x9C      	SUBB A, R4
;__Lib_Math.c,308 :: 		
0x0054	0xF9      	MOV R1, A
;__Lib_Math.c,309 :: 		
0x0055	0x08      	INC R0
;__Lib_Math.c,311 :: 		
__Div_16x16_U_Lab1:
;__Lib_Math.c,312 :: 		
0x0056	0xD5F0E9  	DJNZ B, __Div_16x16_U_Loop1
;__Lib_Math.c,313 :: 		
0x0059	0xE4      	CLR A
;__Lib_Math.c,314 :: 		
0x005A	0xC9      	XCH A, R1
;__Lib_Math.c,315 :: 		
0x005B	0xFC      	MOV R4, A
;__Lib_Math.c,316 :: 		
0x005C	0x22      	RET
;__Lib_Math.c,318 :: 		
__op1hi_not_zero:
;__Lib_Math.c,319 :: 		
0x005D	0xEC      	MOV A, R4
;__Lib_Math.c,320 :: 		
0x005E	0xFF      	MOV R7, A
;__Lib_Math.c,321 :: 		
0x005F	0xF5F0    	MOV B, A
;__Lib_Math.c,322 :: 		
0x0061	0xE9      	MOV A, R1
;__Lib_Math.c,323 :: 		
0x0062	0x84      	DIV AB
;__Lib_Math.c,324 :: 		
0x0063	0x20D21C  	JB OV_bit, __Div_16x16_U_div_ret
;__Lib_Math.c,325 :: 		
0x0066	0xF9      	MOV R1, A
;__Lib_Math.c,326 :: 		
0x0067	0xACF0    	MOV R4, B
;__Lib_Math.c,327 :: 		
0x0069	0x75F008  	MOV B, 8
;__Lib_Math.c,329 :: 		
__Div_16x16_U_Loop2:
;__Lib_Math.c,330 :: 		
0x006C	0xE8      	MOV A, R0
;__Lib_Math.c,331 :: 		
0x006D	0x28      	ADD A, R0
;__Lib_Math.c,332 :: 		
0x006E	0xF8      	MOV R0, A
;__Lib_Math.c,333 :: 		
0x006F	0xEC      	MOV A, R4
;__Lib_Math.c,334 :: 		
0x0070	0x33      	RLC A
;__Lib_Math.c,335 :: 		
0x0071	0xFC      	MOV R4, A
;__Lib_Math.c,336 :: 		
0x0072	0x4007    	JC __Div_16x16_U_Lab2
;__Lib_Math.c,337 :: 		
0x0074	0x9F      	SUBB A, R7
;__Lib_Math.c,338 :: 		
0x0075	0x5006    	JNC __Div_16x16_U_Lab3
;__Lib_Math.c,339 :: 		
0x0077	0xD5F0F2  	DJNZ B, __Div_16x16_U_Loop2
;__Lib_Math.c,340 :: 		
0x007A	0x22      	RET
;__Lib_Math.c,342 :: 		
__Div_16x16_U_Lab2:
;__Lib_Math.c,343 :: 		
0x007B	0xC3      	CLR C
;__Lib_Math.c,344 :: 		
0x007C	0x9F      	SUBB A, R7
;__Lib_Math.c,345 :: 		
__Div_16x16_U_Lab3:
;__Lib_Math.c,346 :: 		
0x007D	0xFC      	MOV R4, A
;__Lib_Math.c,347 :: 		
0x007E	0x08      	INC R0
;__Lib_Math.c,348 :: 		
0x007F	0xD5F0EA  	DJNZ B, __Div_16x16_U_Loop2
;__Lib_Math.c,350 :: 		
__Div_16x16_U_div_ret:
;__Lib_Math.c,352 :: 		
0x0082	0x22      	RET
; end of _Div_16x16_U
_Div_16x16_S:
;__Lib_Math.c,371 :: 		
;__Lib_Math.c,373 :: 		
0x0083	0xC2D5    	CLR F0_bit
;__Lib_Math.c,374 :: 		
0x0085	0xED      	MOV A, R5
;__Lib_Math.c,375 :: 		
0x0086	0x30E709  	JNB 231, __Div_16x16_S_op2hipositive
;__Lib_Math.c,376 :: 		
0x0089	0xB2D5    	CPL F0_bit
;__Lib_Math.c,377 :: 		
0x008B	0xE4      	CLR A
;__Lib_Math.c,378 :: 		
0x008C	0xC3      	CLR C
;__Lib_Math.c,379 :: 		
0x008D	0x9C      	SUBB A, R4
;__Lib_Math.c,380 :: 		
0x008E	0xFC      	MOV R4, A
;__Lib_Math.c,381 :: 		
0x008F	0xE4      	CLR A
;__Lib_Math.c,382 :: 		
0x0090	0x9D      	SUBB A, R5
;__Lib_Math.c,383 :: 		
0x0091	0xFD      	MOV R5, A
;__Lib_Math.c,385 :: 		
__Div_16x16_S_op2hipositive:
;__Lib_Math.c,386 :: 		
0x0092	0xE9      	MOV A, R1
;__Lib_Math.c,387 :: 		
0x0093	0x30E715  	JNB 231, __Div_16x16_S_op1hipositive
;__Lib_Math.c,388 :: 		
0x0096	0xB2D5    	CPL F0_bit
;__Lib_Math.c,389 :: 		
0x0098	0xE4      	CLR A
;__Lib_Math.c,390 :: 		
0x0099	0xC3      	CLR C
;__Lib_Math.c,391 :: 		
0x009A	0x98      	SUBB A, R0
;__Lib_Math.c,392 :: 		
0x009B	0xF8      	MOV R0, A
;__Lib_Math.c,393 :: 		
0x009C	0xE4      	CLR A
;__Lib_Math.c,394 :: 		
0x009D	0x99      	SUBB A, R1
;__Lib_Math.c,395 :: 		
0x009E	0xF9      	MOV R1, A
;__Lib_Math.c,396 :: 		
0x009F	0x12002E  	LCALL _Div_16x16_U
;__Lib_Math.c,397 :: 		
0x00A2	0xC3      	CLR C
;__Lib_Math.c,398 :: 		
0x00A3	0xE4      	CLR A
;__Lib_Math.c,399 :: 		
0x00A4	0x9C      	SUBB A, R4
;__Lib_Math.c,400 :: 		
0x00A5	0xFC      	MOV R4, A
;__Lib_Math.c,401 :: 		
0x00A6	0xE4      	CLR A
;__Lib_Math.c,402 :: 		
0x00A7	0x9D      	SUBB A, R5
;__Lib_Math.c,403 :: 		
0x00A8	0xFD      	MOV R5, A
;__Lib_Math.c,404 :: 		
0x00A9	0x8003    	SJMP __Div_16x16_S_Skip_Udiv
;__Lib_Math.c,406 :: 		
__Div_16x16_S_op1hipositive:
;__Lib_Math.c,407 :: 		
0x00AB	0x12002E  	LCALL _Div_16x16_U
;__Lib_Math.c,409 :: 		
__Div_16x16_S_Skip_Udiv:
;__Lib_Math.c,410 :: 		
0x00AE	0x30D507  	JNB F0_bit, __Div_16x16_S_div_ret
;__Lib_Math.c,411 :: 		
0x00B1	0xC3      	CLR C
;__Lib_Math.c,412 :: 		
0x00B2	0xE4      	CLR A
;__Lib_Math.c,413 :: 		
0x00B3	0x98      	SUBB A, R0
;__Lib_Math.c,414 :: 		
0x00B4	0xF8      	MOV R0, A
;__Lib_Math.c,415 :: 		
0x00B5	0xE4      	CLR A
;__Lib_Math.c,416 :: 		
0x00B6	0x99      	SUBB A, R1
;__Lib_Math.c,417 :: 		
0x00B7	0xF9      	MOV R1, A
;__Lib_Math.c,419 :: 		
__Div_16x16_S_div_ret:
;__Lib_Math.c,421 :: 		
0x00B8	0x22      	RET
; end of _Div_16x16_S
_descomponer:
;Timer7Segmentos.c,20 :: 		void descomponer(int num){
;Timer7Segmentos.c,23 :: 		for(i=0;i<4;i++)
0x00B9	0x751200  	MOV descomponer_i_L0, #0
L_descomponer0:
0x00BC	0xC3      	CLR C
0x00BD	0x7404    	MOV A, #4
0x00BF	0x6480    	XRL A, #128
0x00C1	0xF8      	MOV R0, A
0x00C2	0xE512    	MOV A, descomponer_i_L0
0x00C4	0x6480    	XRL A, #128
0x00C6	0x98      	SUBB A, R0
0x00C7	0x500B    	JNC L_descomponer1
;Timer7Segmentos.c,24 :: 		numero_descompuesto[i]=0;
0x00C9	0x740A    	MOV A, lo_addr(_numero_descompuesto)
0x00CB	0x2512    	ADD A, descomponer_i_L0
0x00CD	0xF8      	MOV R0, A
0x00CE	0x7600    	MOV @R0, #0
;Timer7Segmentos.c,23 :: 		for(i=0;i<4;i++)
0x00D0	0x0512    	INC descomponer_i_L0
;Timer7Segmentos.c,24 :: 		numero_descompuesto[i]=0;
0x00D2	0x80E8    	SJMP L_descomponer0
L_descomponer1:
;Timer7Segmentos.c,25 :: 		i=0;
0x00D4	0x751200  	MOV descomponer_i_L0, #0
;Timer7Segmentos.c,26 :: 		while(num!=0){
L_descomponer3:
0x00D7	0xE510    	MOV A, FARG_descomponer_num
0x00D9	0x4511    	ORL A, FARG_descomponer_num+1
0x00DB	0x6035    	JZ L_descomponer4
;Timer7Segmentos.c,27 :: 		aux=num/10;
0x00DD	0x7C0A    	MOV R4, #10
0x00DF	0x7D00    	MOV R5, #0
0x00E1	0xA810    	MOV R0, FARG_descomponer_num
0x00E3	0xA911    	MOV R1, FARG_descomponer_num+1
0x00E5	0x1183    	ACALL _Div_16x16_S
0x00E7	0x850013  	MOV descomponer_aux_L0, 0
0x00EA	0x850114  	MOV descomponer_aux_L0+1, 1
;Timer7Segmentos.c,28 :: 		numero_descompuesto[i]=num-(aux*10);
0x00ED	0xC000    	PUSH R0
0x00EF	0x740A    	MOV A, lo_addr(_numero_descompuesto)
0x00F1	0x2512    	ADD A, descomponer_i_L0
0x00F3	0xF8      	MOV R0, A
0x00F4	0x850015  	MOV FLOC__descomponer, 0
0x00F7	0xD000    	POP R0
0x00F9	0x75F00A  	MOV B, #10
0x00FC	0xE8      	MOV A, R0
0x00FD	0xA4      	MUL AB
0x00FE	0xF8      	MOV R0, A
0x00FF	0xC3      	CLR C
0x0100	0xE510    	MOV A, FARG_descomponer_num
0x0102	0x98      	SUBB A, R0
0x0103	0xF9      	MOV R1, A
0x0104	0xA815    	MOV R0, FLOC__descomponer
0x0106	0xA601    	MOV @R0, R1
;Timer7Segmentos.c,29 :: 		num=aux;
0x0108	0x851310  	MOV FARG_descomponer_num, descomponer_aux_L0+0
0x010B	0x851411  	MOV FARG_descomponer_num+1, descomponer_aux_L0+1
;Timer7Segmentos.c,30 :: 		i++;
0x010E	0x0512    	INC descomponer_i_L0
;Timer7Segmentos.c,31 :: 		}
0x0110	0x80C5    	SJMP L_descomponer3
L_descomponer4:
;Timer7Segmentos.c,32 :: 		}
0x0112	0x22      	RET
; end of _descomponer
___CC2D:
;__Lib_System.c,13 :: 		
;__Lib_System.c,15 :: 		
_CC2D_Loop1:
;__Lib_System.c,16 :: 		
0x0113	0xE4      	CLR A
;__Lib_System.c,17 :: 		
0x0114	0x93      	MOVC A, @A+DPTR
;__Lib_System.c,18 :: 		
0x0115	0xF6      	MOV @R0, A
;__Lib_System.c,19 :: 		
0x0116	0x08      	INC R0
;__Lib_System.c,20 :: 		
0x0117	0xA3      	INC DPTR
;__Lib_System.c,21 :: 		
0x0118	0xD9F9    	DJNZ R1, _CC2D_Loop1
;__Lib_System.c,23 :: 		
0x011A	0x22      	RET
; end of ___CC2D
_printDisplay:
;Timer7Segmentos.c,34 :: 		void printDisplay(int num){
;Timer7Segmentos.c,35 :: 		descomponer(num);
0x011B	0x850E10  	MOV FARG_descomponer_num, FARG_printDisplay_num+0
0x011E	0x850F11  	MOV FARG_descomponer_num+1, FARG_printDisplay_num+1
0x0121	0x11B9    	ACALL _descomponer
;Timer7Segmentos.c,36 :: 		}
0x0123	0x22      	RET
; end of _printDisplay
_updateDisplay:
0x0124	0xC000    	PUSH R0
0x0126	0xC001    	PUSH R1
0x0128	0xC0D0    	PUSH PSW
0x012A	0xC0E0    	PUSH ACC
0x012C	0xC0F0    	PUSH B
0x012E	0xC082    	PUSH DP0L
0x0130	0xC083    	PUSH DP0H
;Timer7Segmentos.c,38 :: 		void updateDisplay() iv IVT_ADDR_ET0 ilevel 0 ics ICS_AUTO {
;Timer7Segmentos.c,39 :: 		EA_bit = 0; // Deshabilita las Interrupciones globales
0x0132	0xC2AF    	CLR EA_bit
;Timer7Segmentos.c,40 :: 		TR0_bit = 0; // Detener el Timer0
0x0134	0xC28C    	CLR TR0_bit
;Timer7Segmentos.c,41 :: 		TH0 = 0xF0; // Setear el Timer0 high byte
0x0136	0x758CF0  	MOV TH0, #240
;Timer7Segmentos.c,42 :: 		TL0 = 0x60; // Setear el Timer0 low byte
0x0139	0x758A60  	MOV TL0, #96
;Timer7Segmentos.c,44 :: 		P0=0;
0x013C	0x758000  	MOV P0, #0
;Timer7Segmentos.c,45 :: 		P2=digitos[numero_descompuesto[3-indice]];
0x013F	0xA830    	MOV R0, _indice
0x0141	0xE530    	MOV A, _indice
0x0143	0x33      	RLC A
0x0144	0xE4      	CLR A
0x0145	0x95E0    	SUBB A, ACC
0x0147	0xF9      	MOV R1, A
0x0148	0xC3      	CLR C
0x0149	0x7403    	MOV A, #3
0x014B	0x98      	SUBB A, R0
0x014C	0xF8      	MOV R0, A
0x014D	0x7400    	MOV A, #0
0x014F	0x99      	SUBB A, R1
0x0150	0xF9      	MOV R1, A
0x0151	0x740A    	MOV A, lo_addr(_numero_descompuesto)
0x0153	0x28      	ADD A, R0
0x0154	0xF8      	MOV R0, A
0x0155	0xE6      	MOV A, @R0
0x0156	0x24FD    	ADD A, lo_addr(_digitos)
0x0158	0xF9      	MOV R1, A
0x0159	0xE4      	CLR A
0x015A	0x3401    	ADDC A, hi_addr(_digitos)
0x015C	0xFA      	MOV R2, A
0x015D	0x850182  	MOV DP0L, 1
0x0160	0x850283  	MOV DP0H, 2
0x0163	0xE4      	CLR A
0x0164	0x93      	MOVC A, @A+DPTR
0x0165	0xF8      	MOV R0, A
0x0166	0x8500A0  	MOV P2, 0
;Timer7Segmentos.c,46 :: 		P0=pines[indice];
0x0169	0xA830    	MOV R0, _indice
0x016B	0xE530    	MOV A, _indice
0x016D	0x33      	RLC A
0x016E	0xE4      	CLR A
0x016F	0x95E0    	SUBB A, ACC
0x0171	0xF9      	MOV R1, A
0x0172	0xE8      	MOV A, R0
0x0173	0x2407    	ADD A, lo_addr(_pines)
0x0175	0xFA      	MOV R2, A
0x0176	0xE9      	MOV A, R1
0x0177	0x3402    	ADDC A, hi_addr(_pines)
0x0179	0xFB      	MOV R3, A
0x017A	0x850282  	MOV DP0L, 2
0x017D	0x850383  	MOV DP0H, 3
0x0180	0xE4      	CLR A
0x0181	0x93      	MOVC A, @A+DPTR
0x0182	0xF8      	MOV R0, A
0x0183	0x850080  	MOV P0, 0
;Timer7Segmentos.c,47 :: 		indice++;
0x0186	0x0530    	INC _indice
;Timer7Segmentos.c,48 :: 		if(indice==4){
0x0188	0xE530    	MOV A, _indice
0x018A	0x6404    	XRL A, #4
0x018C	0x7003    	JNZ L_updateDisplay5
;Timer7Segmentos.c,49 :: 		indice=0;
0x018E	0x753000  	MOV _indice, #0
;Timer7Segmentos.c,50 :: 		}
L_updateDisplay5:
;Timer7Segmentos.c,53 :: 		TF0_bit = 0;
0x0191	0xC28D    	CLR TF0_bit
;Timer7Segmentos.c,54 :: 		EA_bit = 1; // Habilitar las Interrupciones globales
0x0193	0xD2AF    	SETB EA_bit
;Timer7Segmentos.c,55 :: 		TR0_bit = 1; // Correr el Timer0
0x0195	0xD28C    	SETB TR0_bit
;Timer7Segmentos.c,56 :: 		}
0x0197	0xD083    	POP DP0H
0x0199	0xD082    	POP DP0L
0x019B	0xD0F0    	POP B
0x019D	0xD0E0    	POP ACC
0x019F	0xD0D0    	POP PSW
0x01A1	0xD001    	POP R1
0x01A3	0xD000    	POP R0
0x01A5	0x32      	RETI
; end of _updateDisplay
_main:
0x01A6	0x758180  	MOV SP, #128
0x01A9	0x12020C  	LCALL 524
;Timer7Segmentos.c,58 :: 		void main() {
;Timer7Segmentos.c,60 :: 		TF0_bit = 0; // Ensure that Timer0 interrupt flag is cleared
0x01AC	0xC28D    	CLR TF0_bit
;Timer7Segmentos.c,61 :: 		ET0_bit = 1; // Habilitar la interrupcion del Timer0
0x01AE	0xD2A9    	SETB ET0_bit
;Timer7Segmentos.c,62 :: 		EA_bit = 1; // Habilitar las Interrupciones globales
0x01B0	0xD2AF    	SETB EA_bit
;Timer7Segmentos.c,64 :: 		GATE0_bit = 1; // Poner a cero el bit GATE del Timer0
0x01B2	0xD3      	SETB C
0x01B3	0xE589    	MOV A, GATE0_bit
0x01B5	0x92E3    	MOV #224.B3, C
0x01B7	0xF589    	MOV GATE0_bit, A
;Timer7Segmentos.c,65 :: 		C_T0_bit = 0; // Configura como contador o temporizador el Timer0
0x01B9	0xC3      	CLR C
0x01BA	0xE589    	MOV A, C_T0_bit
0x01BC	0x92E2    	MOV #224.B2, C
0x01BE	0xF589    	MOV C_T0_bit, A
;Timer7Segmentos.c,66 :: 		M10_bit = 0; // M10_M00 = 01 => Mode 1(16-bit Timer/Counter)
0x01C0	0xC3      	CLR C
0x01C1	0xE589    	MOV A, M10_bit
0x01C3	0x92E1    	MOV #224.B1, C
0x01C5	0xF589    	MOV M10_bit, A
;Timer7Segmentos.c,67 :: 		M00_bit = 1;
0x01C7	0xD3      	SETB C
0x01C8	0xE589    	MOV A, M00_bit
0x01CA	0x92E0    	MOV #224.B0, C
0x01CC	0xF589    	MOV M00_bit, A
;Timer7Segmentos.c,70 :: 		TR0_bit = 0; // Apagar el Timer0
0x01CE	0xC28C    	CLR TR0_bit
;Timer7Segmentos.c,71 :: 		TH0 = 0x0F; // Setear el Timer0 high byte
0x01D0	0x758C0F  	MOV TH0, #15
;Timer7Segmentos.c,72 :: 		TL0 = 0xA0; // Setear el Timer0 low byte
0x01D3	0x758AA0  	MOV TL0, #160
;Timer7Segmentos.c,73 :: 		TR0_bit = 1; // Correr el Timer0
0x01D6	0xD28C    	SETB TR0_bit
;Timer7Segmentos.c,77 :: 		while(1){
L_main6:
;Timer7Segmentos.c,78 :: 		printDisplay(numero);
0x01D8	0x85080E  	MOV FARG_printDisplay_num, _numero+0
0x01DB	0x85090F  	MOV FARG_printDisplay_num+1, _numero+1
0x01DE	0x311B    	ACALL _printDisplay
;Timer7Segmentos.c,79 :: 		numero++;
0x01E0	0x7401    	MOV A, #1
0x01E2	0x2508    	ADD A, _numero
0x01E4	0xF508    	MOV _numero, A
0x01E6	0x7400    	MOV A, #0
0x01E8	0x3509    	ADDC A, _numero+1
0x01EA	0xF509    	MOV _numero+1, A
;Timer7Segmentos.c,80 :: 		Delay_ms(1000);
0x01EC	0x7D08    	MOV R5, 8
0x01EE	0x7E9A    	MOV R6, 154
0x01F0	0x7F7C    	MOV R7, 124
0x01F2	0xDFFE    	DJNZ R7, PC-2
0x01F4	0xDEFC    	DJNZ R6, PC-4
0x01F6	0xDDFA    	DJNZ R5, PC-6
0x01F8	0x00      	NOP
;Timer7Segmentos.c,81 :: 		}
0x01F9	0x80DD    	SJMP L_main6
;Timer7Segmentos.c,82 :: 		}
0x01FB	0x80FE    	SJMP #254
; end of _main
0x020C	0x7830    	MOV R0, 48
0x020E	0x7901    	MOV R1, 1
0x0210	0x75820B  	MOV DP0L, 11
0x0213	0x758302  	MOV DP0H, 2
0x0216	0x120113  	LCALL 275
0x0219	0x22      	RET
;Timer7Segmentos.c,1 :: _digitos
0x01FD	0x3F065B ;_digitos+0
0x0200	0x4F666D ;_digitos+3
0x0203	0x7D077F ;_digitos+6
0x0206	0x67 ;_digitos+9
; end of _digitos
;Timer7Segmentos.c,17 :: _pines
0x0207	0x010204 ;_pines+0
0x020A	0x08 ;_pines+3
; end of _pines
;Timer7Segmentos.c,0 :: ?ICS_indice
0x020B	0x00 ;?ICS_indice+0
; end of ?ICS_indice
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x002E      [85]    _Div_16x16_U
0x0083      [54]    _Div_16x16_S
0x00B9      [90]    _descomponer
0x0113       [8]    ___CC2D
0x011B       [9]    _printDisplay
0x0124     [130]    _updateDisplay
0x01A6      [87]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [2]    _numero
0x000A       [4]    _numero_descompuesto
0x000E       [2]    FARG_printDisplay_num
0x0010       [2]    FARG_descomponer_num
0x0012       [1]    descomponer_i_L0
0x0013       [2]    descomponer_aux_L0
0x0015       [1]    FLOC__descomponer
0x0030       [1]    _indice
0x0080       [1]    P0
0x0081       [1]    SP
0x0082       [1]    DPL
0x0083       [1]    DPH
0x0088       [0]    TF0_bit
0x0088       [0]    TR0_bit
0x0089       [0]    M00_bit
0x0089       [0]    M10_bit
0x0089       [0]    GATE0_bit
0x0089       [0]    C_T0_bit
0x008A       [1]    TL0
0x008C       [1]    TH0
0x00A0       [1]    P2
0x00A8       [0]    EA_bit
0x00A8       [0]    ET0_bit
0x00D0       [0]    F0_bit
0x00D0       [0]    OV_bit
0x00D0       [1]    PSW
0x00E0       [1]    ACC
0x00F0       [1]    B
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x01FD      [10]    _digitos
0x0207       [4]    _pines
0x020B       [1]    ?ICS_indice
//** Label List: ** 
//----------------------------------------------
  L_descomponer0
  L_descomponer1
  L_descomponer2
  L_descomponer3
  L_descomponer4
  L_updateDisplay5
  L_main6
  L_main7
  _descomponer
  _printDisplay
  _updateDisplay
  _main
  lab_end
  loop_lab
  lab_end1
  lab_loop1
  lab_end2
  lab_loop3
  __Div_8x8_S_Bpositive
  __Div_8x8_S_Apositive
  __Div_8x8_S_Skip_Div
  __Div_8x8_S_div_ret
  __op2hi_not_zero
  __op1hi_not_zero
  __Div_16x16_U_Loop1
  __Div_16x16_U_Lab1
  __Div_16x16_U_div_ret
  __Div_16x16_U_Loop2
  __Div_16x16_U_Lab2
  __Div_16x16_U_Lab3
  __Div_16x16_S_op2hipositive
  __Div_16x16_S_op1hipositive
  __Div_16x16_S_Skip_Udiv
  __Div_16x16_S_div_ret
  __Div_32x32_U_start
  __Div_32x32_U_aux
  __Div_32x32_U_l2
  __Div_32x32_U_l1
  lw_1
  lw_2
  __Div_32x32_U_l3
  lw_3
  __Div_32x32_U_l4
  __Div_32x32_U_IR_l0
  __Div_32x32_U_l5
  __Div_32x32_U_l6
  __Div_32x32_U_l8
  __Div_32x32_U_l7
  __Div_32x32_U_IR_l1
  __Div_32x32_U_l10
  __Div_32x32_U_l9
  __Div_32x32_U_IR_l2
  __Div_32x32_S_l1
  __Div_32x32_S_call_uns
  __Div_32x32_S_l2
  __Div_32x32_S_l3
  __Div_32x32_S_div_ret
  __shl_long
  __shr_longint
  __shr_longword
  _Mul_16x16
  _Mul_32x32
  _Div_8x8_S
  _Div_16x16_U
  _Div_16x16_S
  _Div_32x32_U
  _Div_32x32_S
  _CC2D_Loop1
  _CC2PD_Loop1
  _CC2XD_Loop1
  ___DoIFC
  ___CC2D
  ___CC2PD
  ___CC2XD
  L_descomponer0
  L_descomponer1
  L_descomponer2
  L_descomponer3
  L_descomponer4
  L_updateDisplay5
  L_main6
  L_main7
  _descomponer
  _printDisplay
  _updateDisplay
  _main
